<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Guide to Deep Learning Architecture</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Chosen Palette: Warm Neutrals -->
    <!-- Application Structure Plan: A single-page application with a sticky top navigation bar for easy access to different sections. The structure is thematic, guiding the user from foundational concepts to advanced topics. The flow is: 1) Introduction, 2) Foundational Pillars (Task, Data, Constraints) presented in an interactive tabbed view, 3) Core Principles (Inductive Bias & Baselines) with visual diagrams, 4) An interactive Architecture Explorer to compare vision and sequence models using dynamic charts, 5) The Iterative Design Process visualized as a flowchart, and 6) a look at the Frontiers of architecture design. This structure breaks down a complex report into digestible, logically connected modules, enhancing usability and understanding over a linear document format. -->
    <!-- Visualization & Content Choices: 
        - Foundations (Task/Data/Constraints): Goal: Inform. Method: Interactive Tabs (HTML/JS). Interaction: Click to switch content. Justification: Organizes dense introductory info into clean, user-selectable chunks.
        - Inductive Bias: Goal: Explain. Method: Custom Diagram (HTML/CSS). Interaction: Hover to highlight concepts. Justification: Visually represents the abstract concept of how different architectures "see" data.
        - Architecture Explorer: Goal: Compare. Method: Bar Charts (Chart.js). Interaction: Buttons to switch between Vision/Sequence model comparisons. Justification: Provides a quantitative, dynamic comparison of key architectures on metrics like parameters and performance, making the trade-offs clear.
        - Iterative Process: Goal: Organize/Explain. Method: Flowchart Diagram (HTML/CSS). Justification: Clearly visualizes the cyclical nature of model refinement.
        - All data is stored in JS objects for easy management and dynamic updates.
    -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8f7f4;
            color: #333;
        }
        .chart-container {
            position: relative;
            width: 100%;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
            height: 300px;
            max-height: 400px;
        }
        @media (min-width: 768px) {
            .chart-container {
                height: 400px;
            }
        }
        .nav-link {
            transition: color 0.3s, border-bottom-color 0.3s;
        }
        .nav-link:hover, .nav-link.active {
            color: #c084fc; /* purple-400 */
            border-bottom-color: #c084fc;
        }
        .tab-btn.active {
            background-color: #c084fc;
            color: white;
        }
        .flowchart-step {
            transition: transform 0.3s, box-shadow 0.3s;
        }
        .flowchart-step:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        }
    </style>
</head>
<body class="antialiased">

    <header class="bg-white/80 backdrop-blur-md shadow-sm sticky top-0 z-50">
        <nav class="container mx-auto px-6 py-4">
            <ul class="flex justify-center space-x-4 md:space-x-8 text-sm md:text-base font-medium text-gray-600">
                <li><a href="#foundations" class="nav-link border-b-2 border-transparent pb-1">Foundations</a></li>
                <li><a href="#principles" class="nav-link border-b-2 border-transparent pb-1">Principles</a></li>
                <li><a href="#explorer" class="nav-link border-b-2 border-transparent pb-1">Explorer</a></li>
                <li><a href="#process" class="nav-link border-b-2 border-transparent pb-1">Process</a></li>
                <li><a href="#frontiers" class="nav-link border-b-2 border-transparent pb-1">Frontiers</a></li>
            </ul>
        </nav>
    </header>

    <main class="container mx-auto px-6 py-12">

        <section id="intro" class="text-center mb-24">
            <h1 class="text-4xl md:text-5xl font-bold text-purple-600 mb-4">A Methodical Guide to Deep Learning Architecture</h1>
            <p class="text-lg md:text-xl text-gray-700 max-w-3xl mx-auto">An interactive journey from first principles to state-of-the-art models. This guide deconstructs the complex process of choosing the right architecture for any task.</p>
        </section>

        <section id="foundations" class="mb-24 scroll-mt-20">
            <h2 class="text-3xl font-bold text-center mb-2">The Foundational Framework</h2>
            <p class="text-center text-gray-600 mb-12 max-w-2xl mx-auto">Effective architecture design begins with a holistic analysis of three interdependent pillars. Understanding these elements defines the viable solution space for any model.</p>
            
            <div class="max-w-4xl mx-auto">
                <div class="mb-6 flex justify-center border-b border-gray-200">
                    <button class="tab-btn px-6 py-3 font-medium text-gray-600 focus:outline-none active" data-tab="task">The Task</button>
                    <button class="tab-btn px-6 py-3 font-medium text-gray-600 focus:outline-none" data-tab="data">The Data</button>
                    <button class="tab-btn px-6 py-3 font-medium text-gray-600 focus:outline-none" data-tab="constraints">The Constraints</button>
                </div>

                <div id="tab-content" class="bg-white p-8 rounded-xl shadow-lg">
                    <div id="task-content" class="tab-pane active">
                        <h3 class="text-2xl font-bold mb-4 text-purple-600">Problem Type</h3>
                        <p class="text-gray-700 mb-4">Precisely defining the problem is the first filter for selecting an architectural family. The model's desired output dictates the structure.</p>
                        <ul class="space-y-3 list-disc list-inside text-gray-700">
                            <li><strong>Classification:</strong> Assigning a categorical label (e.g., cat vs. dog). Uses `softmax` activation.</li>
                            <li><strong>Regression:</strong> Predicting a continuous value (e.g., house price). Uses a linear output neuron.</li>
                            <li><strong>Generation:</strong> Creating new data (e.g., images, text). Uses GANs or Transformers.</li>
                            <li><strong>Anomaly Detection:</strong> Identifying rare events (e.g., fraud). Uses Autoencoders.</li>
                        </ul>
                    </div>
                    <div id="data-content" class="tab-pane hidden">
                        <h3 class="text-2xl font-bold mb-4 text-purple-600">Data Characteristics</h3>
                        <p class="text-gray-700 mb-4">The structure and modality of your data are the most powerful determinants of the right architecture. The model must be able to process and learn from the specific data type.</p>
                        <ul class="space-y-3 list-disc list-inside text-gray-700">
                            <li><strong>Structured Data:</strong> Tabular data (rows/columns). Simple MLPs or Gradient Boosted Trees are effective.</li>
                            <li><strong>Unstructured Data:</strong> Images, audio, text. Requires specialized architectures like CNNs or Transformers to learn features.</li>
                            <li><strong>Dataset Size:</strong> Small datasets risk overfitting with complex models. Large datasets unlock the potential of deep, complex architectures.</li>
                        </ul>
                    </div>
                    <div id="constraints-content" class="tab-pane hidden">
                        <h3 class="text-2xl font-bold mb-4 text-purple-600">Operational Constraints</h3>
                        <p class="text-gray-700 mb-4">A model is only useful if it works in the real world. These non-negotiable constraints must be considered from the start.</p>
                        <ul class="space-y-3 list-disc list-inside text-gray-700">
                            <li><strong>Computational Budget:</strong> Available GPUs, acceptable training time, and cost.</li>
                            <li><strong>Latency Requirements:</strong> How fast must the model make predictions? Real-time apps need low latency (e.g., MobileNet).</li>
                            <li><strong>Interpretability:</strong> Is it necessary to understand the model's decisions? Simpler models are often more transparent.</li>
                        </ul>
                    </div>
                </div>
            </div>
        </section>

        <section id="principles" class="mb-24 scroll-mt-20">
            <h2 class="text-3xl font-bold text-center mb-2">Core Principles</h2>
            <p class="text-center text-gray-600 mb-12 max-w-2xl mx-auto">Deep learning's success stems from matching the data's structure to an architecture with a compatible **inductive bias** â€” the built-in assumptions a model uses to learn.</p>

            <div class="grid md:grid-cols-3 gap-8 text-center">
                <div class="bg-white p-6 rounded-xl shadow-lg">
                    <h3 class="text-xl font-bold mb-3 text-purple-600">CNNs "See"</h3>
                    <p class="text-gray-600 text-sm mb-4">For grid-like data like images.</p>
                    <div class="font-mono text-xs bg-gray-100 p-3 rounded-md">
                        <p><strong>Bias:</strong> Spatial Locality & Hierarchy</p>
                        <p class="text-gray-500">Assumes nearby pixels are related and complex patterns are built from simple ones (edges â†’ shapes â†’ objects).</p>
                    </div>
                </div>
                <div class="bg-white p-6 rounded-xl shadow-lg">
                    <h3 class="text-xl font-bold mb-3 text-purple-600">RNNs "Remember"</h3>
                    <p class="text-gray-600 text-sm mb-4">For sequential data like time series.</p>
                    <div class="font-mono text-xs bg-gray-100 p-3 rounded-md">
                        <p><strong>Bias:</strong> Temporal Dependency</p>
                        <p class="text-gray-500">Assumes the current state depends on previous states in an ordered sequence, maintaining a "memory".</p>
                    </div>
                </div>
                <div class="bg-white p-6 rounded-xl shadow-lg">
                    <h3 class="text-xl font-bold mb-3 text-purple-600">Transformers "Relate"</h3>
                    <p class="text-gray-600 text-sm mb-4">For data needing global context like text.</p>
                    <div class="font-mono text-xs bg-gray-100 p-3 rounded-md">
                        <p><strong>Bias:</strong> Relational Dependency</p>
                        <p class="text-gray-500">Assumes any element can relate to any other, regardless of position, via self-attention.</p>
                    </div>
                </div>
            </div>
        </section>

        <section id="explorer" class="mb-24 scroll-mt-20">
            <h2 class="text-3xl font-bold text-center mb-2">Architecture Explorer</h2>
            <p class="text-center text-gray-600 mb-12 max-w-2xl mx-auto">Compare canonical architectures to understand their trade-offs. Select a domain to explore the evolution of model design and performance.</p>
            
            <div class="text-center mb-8">
                <button id="show-vision-btn" class="px-6 py-2 bg-purple-600 text-white font-semibold rounded-lg shadow-md hover:bg-purple-700 focus:outline-none transition-colors">Vision Models</button>
                <button id="show-sequence-btn" class="px-6 py-2 bg-gray-200 text-gray-700 font-semibold rounded-lg hover:bg-gray-300 focus:outline-none transition-colors ml-4">Sequence Models</button>
            </div>

            <div id="vision-chart-container" class="bg-white p-8 rounded-xl shadow-lg">
                <h3 id="chart-title" class="text-2xl font-bold text-center mb-6">Vision Architectures: Parameters vs. Accuracy</h3>
                <div class="chart-container">
                    <canvas id="visionArchitectureChart"></canvas>
                </div>
                <p id="chart-explanation" class="text-center text-gray-600 mt-4 text-sm max-w-xl mx-auto">This chart compares key vision architectures on two critical metrics: model size (number of parameters, lower is better for efficiency) and top-1 accuracy on the ImageNet benchmark (higher is better). This visualization highlights the trade-offs between model complexity and performance.</p>
            </div>
        </section>

        <section id="process" class="mb-24 scroll-mt-20">
            <h2 class="text-3xl font-bold text-center mb-2">The Iterative Design Process</h2>
            <p class="text-center text-gray-600 mb-12 max-w-2xl mx-auto">The journey from a baseline to an excellent model is a cycle of systematic experimentation, debugging, and principled refinement. This is where theory becomes practice.</p>

            <div class="flex flex-col md:flex-row items-center justify-center space-y-4 md:space-y-0 md:space-x-4">
                <div class="flowchart-step bg-white p-6 rounded-xl shadow-lg w-full md:w-1/4 text-center">
                    <div class="text-3xl mb-2">1.</div>
                    <h4 class="font-bold text-purple-600">Establish Baseline</h4>
                    <p class="text-sm text-gray-600">Create a simple model to set a performance floor.</p>
                </div>
                <div class="text-2xl font-bold text-gray-400">â†’</div>
                <div class="flowchart-step bg-white p-6 rounded-xl shadow-lg w-full md:w-1/4 text-center">
                    <div class="text-3xl mb-2">2.</div>
                    <h4 class="font-bold text-purple-600">Experiment</h4>
                    <p class="text-sm text-gray-600">Tune hyperparameters and try more complex architectures.</p>
                </div>
                <div class="text-2xl font-bold text-gray-400">â†’</div>
                <div class="flowchart-step bg-white p-6 rounded-xl shadow-lg w-full md:w-1/4 text-center">
                    <div class="text-3xl mb-2">3.</div>
                    <h4 class="font-bold text-purple-600">Debug & Visualize</h4>
                    <p class="text-sm text-gray-600">Use tools like activation maps to understand model behavior.</p>
                </div>
                <div class="text-2xl font-bold text-gray-400">â†’</div>
                 <div class="flowchart-step bg-white p-6 rounded-xl shadow-lg w-full md:w-1/4 text-center">
                    <div class="text-3xl mb-2">4.</div>
                    <h4 class="font-bold text-purple-600">Refine & Ablate</h4>
                    <p class="text-sm text-gray-600">Justify complexity by systematically testing components.</p>
                </div>
            </div>
        </section>

        <section id="frontiers" class="scroll-mt-20">
            <h2 class="text-3xl font-bold text-center mb-2">Frontiers in Architecture Design</h2>
            <p class="text-center text-gray-600 mb-12 max-w-2xl mx-auto">The field is constantly evolving, pushing towards greater automation, efficiency, and the ability to tackle novel, multi-faceted problems.</p>
            <div class="grid md:grid-cols-3 gap-8">
                <div class="bg-white p-6 rounded-xl shadow-lg">
                    <h3 class="text-xl font-bold mb-2 text-purple-600">Modular Design</h3>
                    <p class="text-gray-600">For novel use cases, combine pre-trained "backbone" models for different data types (e.g., video + text) and design custom "fusion" mechanisms to make them work together.</p>
                </div>
                <div class="bg-white p-6 rounded-xl shadow-lg">
                    <h3 class="text-xl font-bold mb-2 text-purple-600">Neural Architecture Search (NAS)</h3>
                    <p class="text-gray-600">Automates the design process by using algorithms (like Reinforcement Learning) to search for optimal architectures, though it's computationally very expensive.</p>
                </div>
                <div class="bg-white p-6 rounded-xl shadow-lg">
                    <h3 class="text-xl font-bold mb-2 text-purple-600">Efficiency & Compression</h3>
                    <p class="text-gray-600">Techniques like pruning (removing weights), quantization (reducing precision), and designing lightweight models (e.g., MobileNet) are crucial for deploying models on edge devices.</p>
                </div>
            </div>
        </section>

    </main>

    <footer class="bg-gray-800 text-white mt-24">
        <div class="container mx-auto px-6 py-8 text-center">
            <p>&copy; 2025 Deep Learning Insights. An interactive summary.</p>
            <p class="text-sm text-gray-400 mt-2">This application synthesizes the key concepts from the provided report into an interactive format for educational purposes.</p>
        </div>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const data = {
                vision: {
                    labels: ['VGG16', 'ResNet50', 'InceptionV3', 'ViT-B/16'],
                    datasets: [{
                        label: 'Parameters (Millions)',
                        data: [138, 25.6, 23.8, 86],
                        backgroundColor: 'rgba(192, 132, 252, 0.6)',
                        borderColor: 'rgba(192, 132, 252, 1)',
                        borderWidth: 1,
                        yAxisID: 'y'
                    }, {
                        label: 'ImageNet Top-1 Accuracy (%)',
                        data: [71.3, 76.0, 77.9, 84.1],
                        backgroundColor: 'rgba(129, 140, 248, 0.6)',
                        borderColor: 'rgba(129, 140, 248, 1)',
                        borderWidth: 1,
                        yAxisID: 'y1'
                    }]
                },
                sequence: {
                    labels: ['Simple RNN', 'LSTM', 'Transformer'],
                    datasets: [{
                        label: 'Parallelizability (Arbitrary Score)',
                        data: [1, 2, 10],
                        backgroundColor: 'rgba(192, 132, 252, 0.6)',
                        borderColor: 'rgba(192, 132, 252, 1)',
                        borderWidth: 1,
                        yAxisID: 'y'
                    }, {
                        label: 'Long-Dependency Handling (Arbitrary Score)',
                        data: [2, 7, 9],
                        backgroundColor: 'rgba(129, 140, 248, 0.6)',
                        borderColor: 'rgba(129, 140, 248, 1)',
                        borderWidth: 1,
                        yAxisID: 'y1'
                    }]
                }
            };

            const ctx = document.getElementById('visionArchitectureChart').getContext('2d');
            let myChart = new Chart(ctx, {
                type: 'bar',
                data: data.vision,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Parameters (M)'
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Accuracy (%)'
                            },
                            grid: {
                                drawOnChartArea: false
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += context.parsed.y;
                                        if (context.dataset.label.includes('Accuracy')) {
                                            label += '%';
                                        } else {
                                            label += 'M';
                                        }
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });

            const showVisionBtn = document.getElementById('show-vision-btn');
            const showSequenceBtn = document.getElementById('show-sequence-btn');
            const chartTitle = document.getElementById('chart-title');
            const chartExplanation = document.getElementById('chart-explanation');

            function updateChart(domain) {
                myChart.data = data[domain];
                if (domain === 'vision') {
                    chartTitle.textContent = 'Vision Architectures: Parameters vs. Accuracy';
                    chartExplanation.textContent = 'This chart compares key vision architectures on two critical metrics: model size (number of parameters, lower is better for efficiency) and top-1 accuracy on the ImageNet benchmark (higher is better). This visualization highlights the trade-offs between model complexity and performance.';
                    showVisionBtn.classList.add('bg-purple-600', 'text-white');
                    showVisionBtn.classList.remove('bg-gray-200', 'text-gray-700');
                    showSequenceBtn.classList.add('bg-gray-200', 'text-gray-700');
                    showSequenceBtn.classList.remove('bg-purple-600', 'text-white');
                } else {
                    chartTitle.textContent = 'Sequence Architectures: Parallelism vs. Dependency Handling';
                    chartExplanation.textContent = 'This chart compares key sequence architectures on their ability to be parallelized (higher is better for training speed) and their effectiveness at handling long-range dependencies in data (higher is better for performance on complex sequence tasks). It illustrates the fundamental trade-off that led to the development of Transformers.';
                    showSequenceBtn.classList.add('bg-purple-600', 'text-white');
                    showSequenceBtn.classList.remove('bg-gray-200', 'text-gray-700');
                    showVisionBtn.classList.add('bg-gray-200', 'text-gray-700');
                    showVisionBtn.classList.remove('bg-purple-600', 'text-white');
                }
                myChart.update();
            }

            showVisionBtn.addEventListener('click', () => updateChart('vision'));
            showSequenceBtn.addEventListener('click', () => updateChart('sequence'));

            const tabButtons = document.querySelectorAll('.tab-btn');
            const tabPanes = document.querySelectorAll('.tab-pane');

            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    button.classList.add('active');

                    const tabId = button.dataset.tab;
                    tabPanes.forEach(pane => {
                        if (pane.id === `${tabId}-content`) {
                            pane.classList.remove('hidden');
                            pane.classList.add('active');
                        } else {
                            pane.classList.add('hidden');
                            pane.classList.remove('active');
                        }
                    });
                });
            });

            const navLinks = document.querySelectorAll('.nav-link');
            const sections = document.querySelectorAll('section');

            window.addEventListener('scroll', () => {
                let current = '';
                sections.forEach(section => {
                    const sectionTop = section.offsetTop;
                    if (pageYOffset >= sectionTop - 80) {
                        current = section.getAttribute('id');
                    }
                });

                navLinks.forEach(link => {
                    link.classList.remove('active');
                    if (link.getAttribute('href').includes(current)) {
                        link.classList.add('active');
                    }
                });
            });
        });
    </script>
</body>
</html>
